services:
  # tango.fumi042-server.top用のフロントエンド（既存）
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tango-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/app/application/src:/app/application/src
      - ./frontend/app/application/public:/app/application/public
      - ./frontend/app/application/package.json:/app/application/package.json
      - ./frontend/app/application/package-lock.json:/app/application/package-lock.json
      - ./frontend/app/application/next.config.ts:/app/application/next.config.ts
      - ./frontend/app/application/tsconfig.json:/app/application/tsconfig.json
      - ./frontend/app/application/postcss.config.mjs:/app/application/postcss.config.mjs
      - ./frontend/app/application/eslint.config.mjs:/app/application/eslint.config.mjs
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    working_dir: /app/application
    command: ["npm", "run", "dev"]
    networks:
      - mynetwork
    expose:
      - "3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      disable: true
    depends_on:
      - backend
  
  # tango.fumi042-server.top用のバックエンド（既存）
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./backend/app:/app/src
      - ./backend/app/uploads:/app/uploads
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - SERVER_PORT=${SERVER_PORT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mynetwork
    expose:
      - "8080"
  db:
    image: postgres:16.4
    ports:
      - "5432:5432"
    volumes:
      - ./PostgreSQL:/var/lib/postgresql/data
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
    networks:
      - mynetwork
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Nginxリバースプロキシ
  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
  default:
    driver: bridge