services:
  node:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/app:/app
    environment:
      - CHOKIDAR_USEPOLLING=true  # ファイル監視の安定化
    tty: true
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./backend/app:/app/src
      - ./backend/app/uploads:/app/uploads
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - SERVER_PORT=${SERVER_PORT}
    tty: true 
    depends_on:
      db:
        condition: service_healthy
    networks:
      mynetwork:
        aliases:
          - backend

  db:
    image: postgres:16.4
    ports:
      - 5432:5432
    volumes:
      - ./PostgreSQL:/var/lib/postgresql/data
    #  - ./db:/var/log
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  mynetwork:
    driver: bridge
  default:
    driver: bridge